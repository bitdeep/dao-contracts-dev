/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefInterface extends ethers.utils.Interface {
  functions: {
    "_payRewardByPid(uint256,address)": FunctionFragment;
    "addPool(uint256,address,uint16,uint256,uint256,uint16,bool,uint16)": FunctionFragment;
    "bonusMultiplier()": FunctionFragment;
    "canHarvest(uint256,address)": FunctionFragment;
    "changePoolAllocation(uint256,uint256,bool)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositFor(address,uint256,uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "dev(address)": FunctionFragment;
    "devFee()": FunctionFragment;
    "devaddr()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getAllPoolUsers(uint256)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getTotalPoolUsers(uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "poolExists(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "poolsList(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDevFee(uint16)": FunctionFragment;
    "setMultiplier(uint256)": FunctionFragment;
    "setupLocks(uint256,uint16,uint256,uint256,uint16,uint16)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenPerBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMultiplier(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "updateTokenPerBlock(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "userPoolBalances(uint256)": FunctionFragment;
    "userPoolByPid(uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_payRewardByPid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canHarvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changePoolAllocation",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values: [string]): string;
  encodeFunctionData(functionFragment: "devFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPoolUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "poolExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupLocks",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userPoolBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPoolByPid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_payRewardByPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canHarvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePoolAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPoolUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolsList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPoolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPoolByPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "DepositWithFee(address,uint256,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAuthorizedCaller(address,bool)": EventFragment;
    "SetDev(address,address)": EventFragment;
    "SetReserveAddr(address,address)": EventFragment;
    "SetTaxAddr(address,address)": EventFragment;
    "TokenPerBlockUpdated(uint256)": EventFragment;
    "Transfer(address,uint256,uint256)": EventFragment;
    "UpdateEmissionSettings(address,uint256,uint256)": EventFragment;
    "UpdateMultiplier(uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WithdrawWithTax(address,uint256,uint256,uint256)": EventFragment;
    "withdrawTax(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositWithFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuthorizedCaller"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDev"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReserveAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTaxAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPerBlockUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionSettings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawWithTax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawTax"): EventFragment;
}

export class MasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefInterface;

  functions: {
    _payRewardByPid(
      pid: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_payRewardByPid(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPool(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,uint16,uint256,uint256,uint16,bool,uint16)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    canHarvest(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canHarvest(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    changePoolAllocation(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changePoolAllocation(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositFor(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(address,uint256,uint256)"(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "dev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devFee(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "devFee()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    devaddr(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "devaddr()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getAllPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accTokenPerShare: BigNumber;
      taxWithdraw: number;
      withdrawLockPeriod: BigNumber;
      rewardLockPeriod: BigNumber;
      depositFee: number;
      harvestFee: number;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: number;
    }>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accTokenPerShare: BigNumber;
      taxWithdraw: number;
      withdrawLockPeriod: BigNumber;
      rewardLockPeriod: BigNumber;
      depositFee: number;
      harvestFee: number;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: number;
    }>;

    poolLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "poolLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    poolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolsList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDevFee(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevFee(uint16)"(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultiplier(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultiplier(uint256)"(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setupLocks(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setupLocks(uint256,uint16,uint256,uint256,uint16,uint16)"(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "startBlock()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenPerBlock(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalAllocPoint(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMultiplier(uint256)"(
      multiplierNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTokenPerBlock(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDepositTime: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDepositTime: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    userPoolBalances(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        rewardDebt: BigNumber;
        lastDepositTime: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      }[];
    }>;

    "userPoolBalances(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber;
        rewardDebt: BigNumber;
        lastDepositTime: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      }[];
    }>;

    userPoolByPid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userPoolByPid(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _payRewardByPid(
    pid: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_payRewardByPid(uint256,address)"(
    pid: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPool(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _taxWithdraw: BigNumberish,
    _withdrawLockPeriod: BigNumberish,
    _rewardLockPeriod: BigNumberish,
    _depositFee: BigNumberish,
    _withUpdate: boolean,
    _harvestFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,uint16,uint256,uint256,uint16,bool,uint16)"(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _taxWithdraw: BigNumberish,
    _withdrawLockPeriod: BigNumberish,
    _rewardLockPeriod: BigNumberish,
    _depositFee: BigNumberish,
    _withUpdate: boolean,
    _harvestFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  canHarvest(
    pid: BigNumberish,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canHarvest(uint256,address)"(
    pid: BigNumberish,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changePoolAllocation(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changePoolAllocation(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositFor(
    recipient: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(address,uint256,uint256)"(
    recipient: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "deposits(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "dev(address)"(
    _devaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devFee(overrides?: CallOverrides): Promise<number>;

  "devFee()"(overrides?: CallOverrides): Promise<number>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllPoolUsers(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAllPoolUsers(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPoolUsers(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalPoolUsers(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "poolExists(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    lpToken: string;
    allocPoint: BigNumber;
    lastRewardBlock: BigNumber;
    accTokenPerShare: BigNumber;
    taxWithdraw: number;
    withdrawLockPeriod: BigNumber;
    rewardLockPeriod: BigNumber;
    depositFee: number;
    harvestFee: number;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: BigNumber;
    7: number;
    8: number;
  }>;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    lpToken: string;
    allocPoint: BigNumber;
    lastRewardBlock: BigNumber;
    accTokenPerShare: BigNumber;
    taxWithdraw: number;
    withdrawLockPeriod: BigNumber;
    rewardLockPeriod: BigNumber;
    depositFee: number;
    harvestFee: number;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: BigNumber;
    7: number;
    8: number;
  }>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolsList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "poolsList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDevFee(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevFee(uint16)"(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultiplier(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultiplier(uint256)"(
    val: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setupLocks(
    _pid: BigNumberish,
    _taxWithdraw: BigNumberish,
    _withdrawLockPeriod: BigNumberish,
    _rewardLockPeriod: BigNumberish,
    _depositFee: BigNumberish,
    _harvestFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setupLocks(uint256,uint16,uint256,uint256,uint16,uint16)"(
    _pid: BigNumberish,
    _taxWithdraw: BigNumberish,
    _withdrawLockPeriod: BigNumberish,
    _rewardLockPeriod: BigNumberish,
    _depositFee: BigNumberish,
    _harvestFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMultiplier(
    multiplierNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMultiplier(uint256)"(
    multiplierNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenPerBlock(
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTokenPerBlock(uint256)"(
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    rewardDebt: BigNumber;
    lastDepositTime: BigNumber;
    rewardLockedUp: BigNumber;
    nextHarvestUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    rewardDebt: BigNumber;
    lastDepositTime: BigNumber;
    rewardLockedUp: BigNumber;
    nextHarvestUntil: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  userPoolBalances(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDepositTime: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }[]
  >;

  "userPoolBalances(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDepositTime: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }[]
  >;

  userPoolByPid(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userPoolByPid(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _payRewardByPid(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "_payRewardByPid(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,uint16,uint256,uint256,uint16,bool,uint16)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canHarvest(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changePoolAllocation(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "changePoolAllocation(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(address,uint256,uint256)"(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dev(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    "dev(address)"(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    devFee(overrides?: CallOverrides): Promise<number>;

    "devFee()"(overrides?: CallOverrides): Promise<number>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAllPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accTokenPerShare: BigNumber;
      taxWithdraw: number;
      withdrawLockPeriod: BigNumber;
      rewardLockPeriod: BigNumber;
      depositFee: number;
      harvestFee: number;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: number;
    }>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accTokenPerShare: BigNumber;
      taxWithdraw: number;
      withdrawLockPeriod: BigNumber;
      rewardLockPeriod: BigNumber;
      depositFee: number;
      harvestFee: number;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
      7: number;
      8: number;
    }>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolsList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDevFee(val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setDevFee(uint16)"(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiplier(val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMultiplier(uint256)"(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupLocks(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setupLocks(uint256,uint16,uint256,uint256,uint16,uint16)"(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMultiplier(uint256)"(
      multiplierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenPerBlock(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDepositTime: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDepositTime: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    userPoolBalances(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        amount: BigNumber;
        rewardDebt: BigNumber;
        lastDepositTime: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      }[]
    >;

    "userPoolBalances(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        amount: BigNumber;
        rewardDebt: BigNumber;
        lastDepositTime: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      }[]
    >;

    userPoolByPid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPoolByPid(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    DepositWithFee(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      received: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetAuthorizedCaller(caller: string | null, _status: null): EventFilter;

    SetDev(prevDev: string | null, newDev: string | null): EventFilter;

    SetReserveAddr(
      prevAddr: string | null,
      newAddr: string | null
    ): EventFilter;

    SetTaxAddr(prevAddr: string | null, newAddr: string | null): EventFilter;

    TokenPerBlockUpdated(tokenPerBlock: null): EventFilter;

    Transfer(to: string | null, requsted: null, sent: null): EventFilter;

    UpdateEmissionSettings(
      from: string | null,
      depositAmount: null,
      endBlock: null
    ): EventFilter;

    UpdateMultiplier(multiplierNumber: null): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    WithdrawWithTax(
      user: string | null,
      pid: BigNumberish | null,
      sent: null,
      burned: null
    ): EventFilter;

    withdrawTax(tax: null): EventFilter;
  };

  estimateGas: {
    _payRewardByPid(
      pid: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_payRewardByPid(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPool(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,uint16,uint256,uint256,uint16,bool,uint16)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canHarvest(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changePoolAllocation(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changePoolAllocation(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositFor(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(address,uint256,uint256)"(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dev(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "dev(address)"(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    devFee(overrides?: CallOverrides): Promise<BigNumber>;

    "devFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolsList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDevFee(val: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setDevFee(uint16)"(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultiplier(val: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setMultiplier(uint256)"(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setupLocks(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setupLocks(uint256,uint16,uint256,uint256,uint16,uint16)"(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMultiplier(uint256)"(
      multiplierNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTokenPerBlock(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPoolBalances(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPoolBalances(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPoolByPid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPoolByPid(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _payRewardByPid(
      pid: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_payRewardByPid(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPool(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,uint16,uint256,uint256,uint16,bool,uint16)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _withUpdate: boolean,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canHarvest(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canHarvest(uint256,address)"(
      pid: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changePoolAllocation(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changePoolAllocation(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(address,uint256,uint256)"(
      recipient: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dev(_devaddr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "dev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPoolUsers(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPoolUsers(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolsList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDevFee(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevFee(uint16)"(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultiplier(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultiplier(uint256)"(
      val: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setupLocks(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setupLocks(uint256,uint16,uint256,uint256,uint16,uint16)"(
      _pid: BigNumberish,
      _taxWithdraw: BigNumberish,
      _withdrawLockPeriod: BigNumberish,
      _rewardLockPeriod: BigNumberish,
      _depositFee: BigNumberish,
      _harvestFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMultiplier(uint256)"(
      multiplierNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTokenPerBlock(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPoolBalances(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPoolBalances(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPoolByPid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPoolByPid(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
